x.star.var <- var(x.star)
y.star.var <- var(y.star)
z[i] <- abs((x.star.mean - y.star.mean) / sqrt(x.star.var / n + y.star.var / m))
}
return(sum(z > z.obs) / B)
}
# 2 confidenct interval
data("chickwts")
# 1 test significant diff
soybean <- chickwts[chickwts$feed == 'soybean',][['weight']]
casein <- chickwts[chickwts$feed == 'casein',][['weight']]
sunflower <- chickwts[chickwts$feed == 'sunflower',][['weight']]
median.ConfidenceInterval <- function(x, B){
median <- c()
for(i in 1: B){
x.sample <- sample(x, length(x), replace = T)
median[i] <- median(x.sample)
}
print(quantile(median, c(.05, .95)))
}
median.ConfidenceInterval(sunflower, 10000)
# This is assignment 1
data("chickwts")
# 1 test significant diff
soybean <- chickwts[chickwts$feed == 'soybean',][['weight']]
casein <- chickwts[chickwts$feed == 'casein',][['weight']]
# parametric procedure
t.test(soybean, casein, var.equal = TRUE)
# Non-parametric procedure
wilcox.test(soybean, casein)
# re-sampling procedure
bootstrap.test <- function(x, y, B){
x.mean <- mean(x)
y.mean <- mean(y)
x.var <- var(x)
y.var <- var(y)
n <- length(x)
m <- length(y)
z.obs <- abs((x.mean - y.mean) / sqrt(x.var / n + y.var / m))
y <- y + x.mean - y.mean
z <- c()
for(i in 1:B){
x.star <- sample(x, n, replace = TRUE)
y.star <- sample(y, m, replace = TRUE)
x.star.mean <- mean(x.star)
y.star.mean <- mean(y.star)
x.star.var <- var(x.star)
y.star.var <- var(y.star)
z[i] <- abs((x.star.mean - y.star.mean) / sqrt(x.star.var / n + y.star.var / m))
}
return(sum(z > z.obs) / B)
}
bootstrap.test(soybean, casein, 10000)
# 2 confidenct interval
sunflower <- chickwts[chickwts$feed == 'sunflower',][['weight']]
# a. 95% confidence interval for median
median.ConfidenceInterval <- function(x, B){
median <- c()
for(i in 1: B){
x.sample <- sample(x, length(x), replace = T)
median[i] <- median(x.sample)
}
print(quantile(median, c(.05, .95)))
}
median.ConfidenceInterval(casein, 10000)
median.ConfidenceInterval(sunflower, 10000)
median.ConfidenceInterval(casein, 100000)
median.ConfidenceInterval(sunflower, 100000)
# b. 95% CI for ratio of the variance
ratio.ConfidenceInterval <- function(x, y, B){
ratio <- c()
for(i in 1: B){
x.sample <- sample(x, length(x), replace = T)
y.sample <- sample(y, length(y), replace = T)
ratio[i] <- var(x.sample) / var(y.sample)
}
print(quantile(ratio, c(.025, .975)))
}
ratio.ConfidenceInterval(casein, sunflower, 10000)
a <- t.test(casein)
a$conf.int
# b. 95% CI for ratio of the variance
normal_ratio.ConfidenceInterval <- function(x, y, B){
ratio <- c()
for(i in 1: B){
x.sample <- sample(x, length(x), replace = T)
y.sample <- sample(y, length(y), replace = T)
ratio[i] <- var(x.sample) / var(y.sample)
}
print(t.test(ratio)$conf.int)
}
# b. 95% CI for ratio of the variance
NormalRatio.ConfidenceInterval <- function(x, y, B){
ratio <- c()
for(i in 1: B){
x.sample <- sample(x, length(x), replace = T)
y.sample <- sample(y, length(y), replace = T)
ratio[i] <- var(x.sample) / var(y.sample)
}
print(t.test(ratio)$conf.int)
}
NormalRatio.ConfidenceInterval(casein, sunflower, 10000)
meatmeal <- chickwts[chickwts$feed == 'meanmeal',][['weight']]
chickwts$feed
meatmeal <- chickwts[chickwts$feed == 'meatmeal',][['weight']]
meatmeal.LowWeight <- sum(meatmeal < 256)
soybean.LowWeight <- sum(soybean < 256)
prop.test(x, n)
meatmeal <- chickwts[chickwts$feed == 'meatmeal',][['weight']]
meatmeal.LowWeight <- sum(meatmeal < 256)
soybean.LowWeight <- sum(soybean < 256)
x <- c(meatmeal.LowWeight, soybean.LowWeight)
n <- c(length(meatmeal), length(soybean))
prop.test(x, n)
n
median.ConfidenceInterval <- function(x, y, B){
median.diff <- c()
for(i in 1: B){
x.sample <- sample(x, length(x), replace = T)
y.sample <- sample(y, length(y), replace = T)
median[i] <- median(x.sample) - median(y.sample)
}
print(quantile(median, c(.025, .975)))
}
# This is assignment 1
data("chickwts")
# 1 test significant diff
soybean <- chickwts[chickwts$feed == 'soybean',][['weight']]
casein <- chickwts[chickwts$feed == 'casein',][['weight']]
# parametric procedure
t.test(soybean, casein, var.equal = TRUE)
# Non-parametric procedure
wilcox.test(soybean, casein)
# re-sampling procedure
bootstrap.test <- function(x, y, B){
x.mean <- mean(x)
y.mean <- mean(y)
x.var <- var(x)
y.var <- var(y)
n <- length(x)
m <- length(y)
z.obs <- abs((x.mean - y.mean) / sqrt(x.var / n + y.var / m))
y <- y + x.mean - y.mean
z <- c()
for(i in 1:B){
x.star <- sample(x, n, replace = TRUE)
y.star <- sample(y, m, replace = TRUE)
x.star.mean <- mean(x.star)
y.star.mean <- mean(y.star)
x.star.var <- var(x.star)
y.star.var <- var(y.star)
z[i] <- abs((x.star.mean - y.star.mean) / sqrt(x.star.var / n + y.star.var / m))
}
return(sum(z > z.obs) / B)
}
bootstrap.test(soybean, casein, 10000)
# 2 confidenct interval
sunflower <- chickwts[chickwts$feed == 'sunflower',][['weight']]
MedianDiff.ConfidenceInterval <- function(x, y, B){
median.diff <- c()
for(i in 1: B){
x.sample <- sample(x, length(x), replace = T)
y.sample <- sample(y, length(y), replace = T)
median[i] <- median(x.sample) - median(y.sample)
}
print(quantile(median.diff, c(.025, .975)))
}
median.ConfidenceInterval(casein, sunflower, 100000)
MedianDiff.ConfidenceInterval <- function(x, y, B){
median.diff <- c()
for(i in 1: B){
x.sample <- sample(x, length(x), replace = T)
y.sample <- sample(y, length(y), replace = T)
median.diff[i] <- median(x.sample) - median(y.sample)
}
print(quantile(median.diff, c(.025, .975)))
}
median.ConfidenceInterval(casein, sunflower, 100000)
MedianDiff.ConfidenceInterval <- function(x, y, B){
median.diff <- c()
for(i in 1: B){
x.sample <- sample(x, length(x), replace = T)
y.sample <- sample(y, length(y), replace = T)
median.diff[i] <- median(x.sample) - median(y.sample)
}
print(quantile(median.diff, c(.025, .975)))
}
median.ConfidenceInterval(casein, sunflower, 100000)
MedianDiff.ConfidenceInterval(casein, sunflower, 100000)
# This is assignment 1
data("chickwts")
# 1 test significant diff
soybean <- chickwts[chickwts$feed == 'soybean',][['weight']]
casein <- chickwts[chickwts$feed == 'casein',][['weight']]
# parametric procedure
t.test(soybean, casein, var.equal = TRUE)
# Non-parametric procedure
wilcox.test(soybean, casein)
# re-sampling procedure
bootstrap.test <- function(x, y, B){
x.mean <- mean(x)
y.mean <- mean(y)
x.var <- var(x)
y.var <- var(y)
n <- length(x)
m <- length(y)
z.obs <- abs((x.mean - y.mean) / sqrt(x.var / n + y.var / m))
y <- y + x.mean - y.mean
z <- c()
for(i in 1:B){
x.star <- sample(x, n, replace = TRUE)
y.star <- sample(y, m, replace = TRUE)
x.star.mean <- mean(x.star)
y.star.mean <- mean(y.star)
x.star.var <- var(x.star)
y.star.var <- var(y.star)
z[i] <- abs((x.star.mean - y.star.mean) / sqrt(x.star.var / n + y.star.var / m))
}
return(sum(z > z.obs) / B)
}
bootstrap.test(soybean, casein, 10000)
# 2 confidenct interval
sunflower <- chickwts[chickwts$feed == 'sunflower',][['weight']]
# a. 95% confidence interval for median
MedianDiff.ConfidenceInterval <- function(x, y, B){
median.diff <- c()
for(i in 1: B){
x.sample <- sample(x, length(x), replace = T)
y.sample <- sample(y, length(y), replace = T)
median.diff[i] <- median(x.sample) - median(y.sample)
}
print(quantile(median.diff, c(.025, .975)))
}
MedianDiff.ConfidenceInterval(casein, sunflower, 100000)
# b. 95% CI for ratio of the variance
ratio.ConfidenceInterval <- function(x, y, B){
ratio <- c()
for(i in 1: B){
x.sample <- sample(x, length(x), replace = T)
y.sample <- sample(y, length(y), replace = T)
ratio[i] <- var(x.sample) / var(y.sample)
}
print(quantile(ratio, c(.025, .975)))
}
ratio.ConfidenceInterval(casein, sunflower, 10000)
# c. 95% CI for ratio of the variance under normal assumption
NormalRatio.ConfidenceInterval <- function(x, y, B){
ratio <- c()
for(i in 1: B){
x.sample <- sample(x, length(x), replace = T)
y.sample <- sample(y, length(y), replace = T)
ratio[i] <- var(x.sample) / var(y.sample)
}
print(t.test(ratio)$conf.int)
}
NormalRatio.ConfidenceInterval(casein, sunflower, 10000)
# 3 significant diff
meatmeal <- chickwts[chickwts$feed == 'meatmeal',][['weight']]
meatmeal.LowWeight <- sum(meatmeal < 256)
soybean.LowWeight <- sum(soybean < 256)
x <- c(meatmeal.LowWeight, soybean.LowWeight)
n <- c(length(meatmeal), length(soybean))
prop.test(x, n)
# This is assignment 1
data("chickwts")
# 1 test significant diff
soybean <- chickwts[chickwts$feed == 'soybean',][['weight']]
casein <- chickwts[chickwts$feed == 'casein',][['weight']]
# parametric procedure
t.test(soybean, casein, var.equal = TRUE)
# Non-parametric procedure
wilcox.test(soybean, casein)
# re-sampling procedure
bootstrap.test <- function(x, y, B){
x.mean <- mean(x)
y.mean <- mean(y)
x.var <- var(x)
y.var <- var(y)
n <- length(x)
m <- length(y)
z.obs <- abs((x.mean - y.mean) / sqrt(x.var / n + y.var / m))
y <- y + x.mean - y.mean
z <- c()
for(i in 1:B){
x.star <- sample(x, n, replace = TRUE)
y.star <- sample(y, m, replace = TRUE)
x.star.mean <- mean(x.star)
y.star.mean <- mean(y.star)
x.star.var <- var(x.star)
y.star.var <- var(y.star)
z[i] <- abs((x.star.mean - y.star.mean) / sqrt(x.star.var / n + y.star.var / m))
}
return(sum(z > z.obs) / B)
}
bootstrap.test(soybean, casein, 10000)
# 2 confidenct interval
sunflower <- chickwts[chickwts$feed == 'sunflower',][['weight']]
# a. 95% confidence interval for median
MedianDiff.ConfidenceInterval <- function(x, y, B){
median.diff <- c()
for(i in 1: B){
x.sample <- sample(x, length(x), replace = T)
y.sample <- sample(y, length(y), replace = T)
median.diff[i] <- median(x.sample) - median(y.sample)
}
print(quantile(median.diff, c(.025, .975)))
}
MedianDiff.ConfidenceInterval(casein, sunflower, 100000)
# b. 95% CI for ratio of the variance
ratio.ConfidenceInterval <- function(x, y, B){
ratio <- c()
for(i in 1: B){
x.sample <- sample(x, length(x), replace = T)
y.sample <- sample(y, length(y), replace = T)
ratio[i] <- var(x.sample) / var(y.sample)
}
print(quantile(ratio, c(.025, .975)))
}
ratio.ConfidenceInterval(casein, sunflower, 10000)
# c. 95% CI for ratio of the variance under normal assumption
NormalRatio.ConfidenceInterval <- function(x, y, B){
ratio <- c()
for(i in 1: B){
x.sample <- sample(x, length(x), replace = T)
y.sample <- sample(y, length(y), replace = T)
ratio[i] <- var(x.sample) / var(y.sample)
}
print(t.test(ratio)$conf.int)
}
NormalRatio.ConfidenceInterval(casein, sunflower, 10000)
# 3 significant diff
meatmeal <- chickwts[chickwts$feed == 'meatmeal',][['weight']]
meatmeal.LowWeight <- sum(meatmeal < 256)
soybean.LowWeight <- sum(soybean < 256)
x <- c(meatmeal.LowWeight, soybean.LowWeight)
n <- c(length(meatmeal), length(soybean))
prop.test(x, n)
library(car)
install.packages('car')
library(car)
help("durbinWatsonTest")
library('MASS')
data("Pima.te")
Pima.te <- Pima.te[c('glu', 'npreg', 'bp', 'skin', 'bmi', 'age')]
# a) Fit a multiple linear regression model
LinearModel <- lm(glu ~ npreg + bp + skin + bmi + age, data = Pima.te)
summary(LinearModel)
durbinWatsonTest(LinearModel)
infIndexPlot(LinearModel)
?lmsreg
library('MASS')
?lmsreg
LeastMedianModel <- lmsreg(glu ~ npreg + bp + skin + bmi + age, data = Pima.te)
summary(LeastMedianModel)
library('MASS')
data("Pima.te")
Pima.te <- Pima.te[c('glu', 'npreg', 'bp', 'skin', 'bmi', 'age')]
# a) Fit a multiple linear regression model
# c Least Median of Squares Regression
LeastMedianModel <- lmsreg(glu ~ npreg + bp + skin + bmi + age, data = Pima.te)
summary(LeastMedianModel)
coef(LeastMedianModel)
library('MASS')
data("Pima.te")
Pima.te <- Pima.te[c('glu', 'npreg', 'bp', 'skin', 'bmi', 'age')]
# a) Fit a multiple linear regression model
LinearModel <- lm(glu ~ npreg + bp + skin + bmi + age, data = Pima.te)
summary(LinearModel)
# c Least Median of Squares Regression
LeastMedianModel <- lmsreg(glu ~ npreg + bp + skin + bmi + age, data = Pima.te)
summary(LeastMedianModel)
coef(LeastMedianModel)
LeastMedianModel$residuals
LinearModel$residuals
summary(LinearModel)
LeastMedianModel$terms
LeastMedianModel$xlevels
LeastMedianModel$model
LeastMedianModel$bestone
summary(LeastMedianModel)$r.suqres
a <- summary(LeastMedianModel)
a
library('MASS')
data("Pima.te")
Pima.te <- Pima.te[c('glu', 'npreg', 'bp', 'skin', 'bmi', 'age')]
# a) Fit a multiple linear regression model
LinearModel <- lm(glu ~ npreg + bp + skin + bmi + age, data = Pima.te)
summary(LinearModel)
plot(LinearModel)
getwd()
# c Least Median of Squares Regression
LeastMedianModel <- lmsreg(glu ~ npreg + bp + skin + bmi + age, data = Pima.te)
summary(LeastMedianModel)
coef(LeastMedianModel)
# Uncorrelated error
library(car)
durbinWatsonTest(LinearModel)
# Uncorrelated error
library(car)
durbinWatsonTest(LinearModel)
# Check for outliers and influential points
infIndexPlot(LinearModel)
# c Least Median of Squares Regression
LeastMedianModel <- lmsreg(glu ~ npreg + bp + skin + bmi + age, data = Pima.te)
summary(LeastMedianModel)
coef(LeastMedianModel)
# c Least Median of Squares Regression
LeastMedianModel <- lmsreg(glu ~ npreg + bp + skin + bmi + age, data = Pima.te)
summary(LeastMedianModel)
coef(LeastMedianModel)
# c Least Median of Squares Regression
LeastMedianModel <- lmsreg(glu ~ npreg + bp + skin + bmi + age, data = Pima.te)
summary(LeastMedianModel)
coef(LeastMedianModel)
# c Least Median of Squares Regression
LeastMedianModel <- lmsreg(glu ~ npreg + bp + skin + bmi + age, data = Pima.te)
summary(LeastMedianModel)
coef(LeastMedianModel)
# c Least Median of Squares Regression
LeastMedianModel <- lmsreg(glu ~ npreg + bp + skin + bmi + age, data = Pima.te)
summary(LeastMedianModel)
coef(LeastMedianModel)
anova(LeastMedianModel, LinearModel)
coef(LinearModel)
# c Least Median of Squares Regression
LeastMedianModel <- lmsreg(glu ~ npreg + bp + skin + bmi + age, data = Pima.te)
summary(LeastMedianModel)
coef(LeastMedianModel)
coef(LinearModel)
summary(LinearModel)
library('MASS')
data("Pima.te")
Pima.te <- Pima.te[c('glu', 'npreg', 'bp', 'skin', 'bmi', 'age')]
# a) Fit a multiple linear regression model
LinearModel <- lm(glu ~ npreg + bp + skin + bmi + age, data = Pima.te)
summary(LinearModel)
# b) State and assess the validity of the underlying assumptions
# Linearity
library(GGally)
ggpairs(Pima.te)
# interaction
inter1 <- npreg*bp
inter2 <- npreg*skin
inter3 <- npreg*bmi
inter4 <- npreg*age
inter5 <- bp*skin
inter6 <- bp*bmi
inter7 <- bp*age
inter8 <- skin*bmi
inter9 <- skin*age
inter10 <- bmi*age
LinearModelwithAllInteractions = lm(glu ~ npreg + bp + skin + bmi + age + inter1 + inter2 + inter3 +
inter4 + inter5 + inter6+ inter7 + inter8 + inter9 + inter10)
summary(LinearModelwithAllInteractions)
LinearModelwithTwoInteractions = lm(glu ~ npreg + bp + skin + bmi + age + inter7 + inter9)
summary(LinearModelwithTwoInteractions)
LinearModelwithOneInteractions = lm(glu ~ npreg + bp + skin + bmi + age + inter9)
summary(LinearModelwithOneInteractions)
LinearModelwithAllInteractions = lm(glu ~ npreg + bp + skin + bmi + age + inter1 + inter2 + inter3 +
inter4 + inter5 + inter6+ inter7 + inter8 + inter9 + inter10, data = Pima.te)
summary(LinearModelwithAllInteractions)
LinearModelwithTwoInteractions = lm(glu ~ npreg + bp + skin + bmi + age + inter7 + inter9, , data = Pima.te)
summary(LinearModelwithTwoInteractions)
LinearModelwithOneInteractions = lm(glu ~ npreg + bp + skin + bmi + age + inter9, , data = Pima.te)
summary(LinearModelwithOneInteractions)
LinearModelwithAllInteractions = lm(glu ~ npreg + bp + skin + bmi + age + npreg*bp , data = Pima.te)
LinearModelwithAllInteractions = lm(glu ~ npreg + bp + skin + bmi + age + npreg*bp + npreg*skin + npreg*bmi +
npreg*age + bp*skin + bp*bmi+ bp*age + skin*bmi + skin*age + bmi*age, data = Pima.te)
summary(LinearModelwithAllInteractions)
LinearModelwithTwoInteractions = lm(glu ~ npreg + bp + skin + bmi + age + bp*age + skin*age, data = Pima.te)
summary(LinearModelwithTwoInteractions)
LinearModelwithOneInteractions = lm(glu ~ npreg + bp + skin + bmi + age + skin*age, data = Pima.te)
summary(LinearModelwithOneInteractions)
setwd("~/Project/ADA_Homework/Assignment 4")
library(MASS)
data("birthwt")
birthwt
multiLinearModel <- lm(bwt ~ age + lwt + race + smoke + ptl + ht + ui + ftv, data = birthwt)
library(car)
vif(multiLinearModel)
vifs <- vif(multiLinearModel)
mean(vif(multiLinearModel))
lm.ridge(bwt ~ age + lwt + race + smoke + ptl + ht + ui + ftv, data = birthwt)
RidgeRegressionModel <- lm.ridge(bwt ~ age + lwt + race + smoke + ptl + ht + ui + ftv, data = birthwt)
summary(multiLinearModel)
summary(RidgeRegressionModel)
summary(multiLinearModel)$coef
lm.ridge(bwt ~ age + lwt + race + smoke + ptl + ht + ui + ftv, data = birthwt)
?lm.ridge
lm.ridge(bwt ~ age + lwt + race + smoke + ptl + ht + ui + ftv, data = birthwt, lambda = 1)
require(glmnet)
install.packages("glmnet")
library(glmnet)
y <- birthwt[c('age', 'lwt', 'race', 'smoke', 'ptl', 'ht', 'ui', 'ftv')]
x <- birthwt$bwt
LassoModel <- glmnet(x, y)
?glm
x <- birthwt[c('age', 'lwt', 'race', 'smoke', 'ptl', 'ht', 'ui', 'ftv')]
y <- birthwt$bwt
LassoModel <- glmnet(x, y)
y
x
LassoModel <- glmnet(x, y)
LassoModel <- glmnet(as.matrix(x), y)
LassoModel
cv.LassoModel <- cv.glmnet(as.matrix(x), y)
plot(cv.LassoModel)
coef <- coef(cv.LassoModel, s = 'lambda.min')
coef
stepAIC(multiLinearModel, direction = 'both')
stepAIC(multiLinearModel, direction = 'forward')
stepAIC(multiLinearModel, direction = 'backward')
