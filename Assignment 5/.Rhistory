n <- length(x)
m <- length(y)
z.obs <- abs((x.mean - y.mean) / sqrt(x.var / n + y.var / m))
y <- y + x.mean - y.mean
z <- c()
for(i in 1:B){
x.star <- sample(x, n, replace = TRUE)
y.star <- sample(y, m, replace = TRUE)
x.star.mean <- mean(x.star)
y.star.mean <- mean(y.star)
x.star.var <- var(x.star)
y.star.var <- var(y.star)
z[i] <- abs((x.star.mean - y.star.mean) / sqrt(x.star.var / n + y.star.var / m))
}
return(sum(z > z.obs) / B)
}
bootstrap.test(soybean, casein, 10000)
# 2 confidenct interval
sunflower <- chickwts[chickwts$feed == 'sunflower',][['weight']]
MedianDiff.ConfidenceInterval <- function(x, y, B){
median.diff <- c()
for(i in 1: B){
x.sample <- sample(x, length(x), replace = T)
y.sample <- sample(y, length(y), replace = T)
median[i] <- median(x.sample) - median(y.sample)
}
print(quantile(median.diff, c(.025, .975)))
}
median.ConfidenceInterval(casein, sunflower, 100000)
MedianDiff.ConfidenceInterval <- function(x, y, B){
median.diff <- c()
for(i in 1: B){
x.sample <- sample(x, length(x), replace = T)
y.sample <- sample(y, length(y), replace = T)
median.diff[i] <- median(x.sample) - median(y.sample)
}
print(quantile(median.diff, c(.025, .975)))
}
median.ConfidenceInterval(casein, sunflower, 100000)
MedianDiff.ConfidenceInterval <- function(x, y, B){
median.diff <- c()
for(i in 1: B){
x.sample <- sample(x, length(x), replace = T)
y.sample <- sample(y, length(y), replace = T)
median.diff[i] <- median(x.sample) - median(y.sample)
}
print(quantile(median.diff, c(.025, .975)))
}
median.ConfidenceInterval(casein, sunflower, 100000)
MedianDiff.ConfidenceInterval(casein, sunflower, 100000)
# This is assignment 1
data("chickwts")
# 1 test significant diff
soybean <- chickwts[chickwts$feed == 'soybean',][['weight']]
casein <- chickwts[chickwts$feed == 'casein',][['weight']]
# parametric procedure
t.test(soybean, casein, var.equal = TRUE)
# Non-parametric procedure
wilcox.test(soybean, casein)
# re-sampling procedure
bootstrap.test <- function(x, y, B){
x.mean <- mean(x)
y.mean <- mean(y)
x.var <- var(x)
y.var <- var(y)
n <- length(x)
m <- length(y)
z.obs <- abs((x.mean - y.mean) / sqrt(x.var / n + y.var / m))
y <- y + x.mean - y.mean
z <- c()
for(i in 1:B){
x.star <- sample(x, n, replace = TRUE)
y.star <- sample(y, m, replace = TRUE)
x.star.mean <- mean(x.star)
y.star.mean <- mean(y.star)
x.star.var <- var(x.star)
y.star.var <- var(y.star)
z[i] <- abs((x.star.mean - y.star.mean) / sqrt(x.star.var / n + y.star.var / m))
}
return(sum(z > z.obs) / B)
}
bootstrap.test(soybean, casein, 10000)
# 2 confidenct interval
sunflower <- chickwts[chickwts$feed == 'sunflower',][['weight']]
# a. 95% confidence interval for median
MedianDiff.ConfidenceInterval <- function(x, y, B){
median.diff <- c()
for(i in 1: B){
x.sample <- sample(x, length(x), replace = T)
y.sample <- sample(y, length(y), replace = T)
median.diff[i] <- median(x.sample) - median(y.sample)
}
print(quantile(median.diff, c(.025, .975)))
}
MedianDiff.ConfidenceInterval(casein, sunflower, 100000)
# b. 95% CI for ratio of the variance
ratio.ConfidenceInterval <- function(x, y, B){
ratio <- c()
for(i in 1: B){
x.sample <- sample(x, length(x), replace = T)
y.sample <- sample(y, length(y), replace = T)
ratio[i] <- var(x.sample) / var(y.sample)
}
print(quantile(ratio, c(.025, .975)))
}
ratio.ConfidenceInterval(casein, sunflower, 10000)
# c. 95% CI for ratio of the variance under normal assumption
NormalRatio.ConfidenceInterval <- function(x, y, B){
ratio <- c()
for(i in 1: B){
x.sample <- sample(x, length(x), replace = T)
y.sample <- sample(y, length(y), replace = T)
ratio[i] <- var(x.sample) / var(y.sample)
}
print(t.test(ratio)$conf.int)
}
NormalRatio.ConfidenceInterval(casein, sunflower, 10000)
# 3 significant diff
meatmeal <- chickwts[chickwts$feed == 'meatmeal',][['weight']]
meatmeal.LowWeight <- sum(meatmeal < 256)
soybean.LowWeight <- sum(soybean < 256)
x <- c(meatmeal.LowWeight, soybean.LowWeight)
n <- c(length(meatmeal), length(soybean))
prop.test(x, n)
# This is assignment 1
data("chickwts")
# 1 test significant diff
soybean <- chickwts[chickwts$feed == 'soybean',][['weight']]
casein <- chickwts[chickwts$feed == 'casein',][['weight']]
# parametric procedure
t.test(soybean, casein, var.equal = TRUE)
# Non-parametric procedure
wilcox.test(soybean, casein)
# re-sampling procedure
bootstrap.test <- function(x, y, B){
x.mean <- mean(x)
y.mean <- mean(y)
x.var <- var(x)
y.var <- var(y)
n <- length(x)
m <- length(y)
z.obs <- abs((x.mean - y.mean) / sqrt(x.var / n + y.var / m))
y <- y + x.mean - y.mean
z <- c()
for(i in 1:B){
x.star <- sample(x, n, replace = TRUE)
y.star <- sample(y, m, replace = TRUE)
x.star.mean <- mean(x.star)
y.star.mean <- mean(y.star)
x.star.var <- var(x.star)
y.star.var <- var(y.star)
z[i] <- abs((x.star.mean - y.star.mean) / sqrt(x.star.var / n + y.star.var / m))
}
return(sum(z > z.obs) / B)
}
bootstrap.test(soybean, casein, 10000)
# 2 confidenct interval
sunflower <- chickwts[chickwts$feed == 'sunflower',][['weight']]
# a. 95% confidence interval for median
MedianDiff.ConfidenceInterval <- function(x, y, B){
median.diff <- c()
for(i in 1: B){
x.sample <- sample(x, length(x), replace = T)
y.sample <- sample(y, length(y), replace = T)
median.diff[i] <- median(x.sample) - median(y.sample)
}
print(quantile(median.diff, c(.025, .975)))
}
MedianDiff.ConfidenceInterval(casein, sunflower, 100000)
# b. 95% CI for ratio of the variance
ratio.ConfidenceInterval <- function(x, y, B){
ratio <- c()
for(i in 1: B){
x.sample <- sample(x, length(x), replace = T)
y.sample <- sample(y, length(y), replace = T)
ratio[i] <- var(x.sample) / var(y.sample)
}
print(quantile(ratio, c(.025, .975)))
}
ratio.ConfidenceInterval(casein, sunflower, 10000)
# c. 95% CI for ratio of the variance under normal assumption
NormalRatio.ConfidenceInterval <- function(x, y, B){
ratio <- c()
for(i in 1: B){
x.sample <- sample(x, length(x), replace = T)
y.sample <- sample(y, length(y), replace = T)
ratio[i] <- var(x.sample) / var(y.sample)
}
print(t.test(ratio)$conf.int)
}
NormalRatio.ConfidenceInterval(casein, sunflower, 10000)
# 3 significant diff
meatmeal <- chickwts[chickwts$feed == 'meatmeal',][['weight']]
meatmeal.LowWeight <- sum(meatmeal < 256)
soybean.LowWeight <- sum(soybean < 256)
x <- c(meatmeal.LowWeight, soybean.LowWeight)
n <- c(length(meatmeal), length(soybean))
prop.test(x, n)
library(car)
install.packages('car')
library(car)
help("durbinWatsonTest")
library('MASS')
data("Pima.te")
Pima.te <- Pima.te[c('glu', 'npreg', 'bp', 'skin', 'bmi', 'age')]
# a) Fit a multiple linear regression model
LinearModel <- lm(glu ~ npreg + bp + skin + bmi + age, data = Pima.te)
summary(LinearModel)
durbinWatsonTest(LinearModel)
infIndexPlot(LinearModel)
?lmsreg
library('MASS')
?lmsreg
LeastMedianModel <- lmsreg(glu ~ npreg + bp + skin + bmi + age, data = Pima.te)
summary(LeastMedianModel)
library('MASS')
data("Pima.te")
Pima.te <- Pima.te[c('glu', 'npreg', 'bp', 'skin', 'bmi', 'age')]
# a) Fit a multiple linear regression model
# c Least Median of Squares Regression
LeastMedianModel <- lmsreg(glu ~ npreg + bp + skin + bmi + age, data = Pima.te)
summary(LeastMedianModel)
coef(LeastMedianModel)
library('MASS')
data("Pima.te")
Pima.te <- Pima.te[c('glu', 'npreg', 'bp', 'skin', 'bmi', 'age')]
# a) Fit a multiple linear regression model
LinearModel <- lm(glu ~ npreg + bp + skin + bmi + age, data = Pima.te)
summary(LinearModel)
# c Least Median of Squares Regression
LeastMedianModel <- lmsreg(glu ~ npreg + bp + skin + bmi + age, data = Pima.te)
summary(LeastMedianModel)
coef(LeastMedianModel)
LeastMedianModel$residuals
LinearModel$residuals
summary(LinearModel)
LeastMedianModel$terms
LeastMedianModel$xlevels
LeastMedianModel$model
LeastMedianModel$bestone
summary(LeastMedianModel)$r.suqres
a <- summary(LeastMedianModel)
a
library('MASS')
data("Pima.te")
Pima.te <- Pima.te[c('glu', 'npreg', 'bp', 'skin', 'bmi', 'age')]
# a) Fit a multiple linear regression model
LinearModel <- lm(glu ~ npreg + bp + skin + bmi + age, data = Pima.te)
summary(LinearModel)
plot(LinearModel)
getwd()
# c Least Median of Squares Regression
LeastMedianModel <- lmsreg(glu ~ npreg + bp + skin + bmi + age, data = Pima.te)
summary(LeastMedianModel)
coef(LeastMedianModel)
# Uncorrelated error
library(car)
durbinWatsonTest(LinearModel)
# Uncorrelated error
library(car)
durbinWatsonTest(LinearModel)
# Check for outliers and influential points
infIndexPlot(LinearModel)
# c Least Median of Squares Regression
LeastMedianModel <- lmsreg(glu ~ npreg + bp + skin + bmi + age, data = Pima.te)
summary(LeastMedianModel)
coef(LeastMedianModel)
# c Least Median of Squares Regression
LeastMedianModel <- lmsreg(glu ~ npreg + bp + skin + bmi + age, data = Pima.te)
summary(LeastMedianModel)
coef(LeastMedianModel)
# c Least Median of Squares Regression
LeastMedianModel <- lmsreg(glu ~ npreg + bp + skin + bmi + age, data = Pima.te)
summary(LeastMedianModel)
coef(LeastMedianModel)
# c Least Median of Squares Regression
LeastMedianModel <- lmsreg(glu ~ npreg + bp + skin + bmi + age, data = Pima.te)
summary(LeastMedianModel)
coef(LeastMedianModel)
# c Least Median of Squares Regression
LeastMedianModel <- lmsreg(glu ~ npreg + bp + skin + bmi + age, data = Pima.te)
summary(LeastMedianModel)
coef(LeastMedianModel)
anova(LeastMedianModel, LinearModel)
coef(LinearModel)
# c Least Median of Squares Regression
LeastMedianModel <- lmsreg(glu ~ npreg + bp + skin + bmi + age, data = Pima.te)
summary(LeastMedianModel)
coef(LeastMedianModel)
coef(LinearModel)
summary(LinearModel)
library('MASS')
data("Pima.te")
Pima.te <- Pima.te[c('glu', 'npreg', 'bp', 'skin', 'bmi', 'age')]
# a) Fit a multiple linear regression model
LinearModel <- lm(glu ~ npreg + bp + skin + bmi + age, data = Pima.te)
summary(LinearModel)
# b) State and assess the validity of the underlying assumptions
# Linearity
library(GGally)
ggpairs(Pima.te)
# interaction
inter1 <- npreg*bp
inter2 <- npreg*skin
inter3 <- npreg*bmi
inter4 <- npreg*age
inter5 <- bp*skin
inter6 <- bp*bmi
inter7 <- bp*age
inter8 <- skin*bmi
inter9 <- skin*age
inter10 <- bmi*age
LinearModelwithAllInteractions = lm(glu ~ npreg + bp + skin + bmi + age + inter1 + inter2 + inter3 +
inter4 + inter5 + inter6+ inter7 + inter8 + inter9 + inter10)
summary(LinearModelwithAllInteractions)
LinearModelwithTwoInteractions = lm(glu ~ npreg + bp + skin + bmi + age + inter7 + inter9)
summary(LinearModelwithTwoInteractions)
LinearModelwithOneInteractions = lm(glu ~ npreg + bp + skin + bmi + age + inter9)
summary(LinearModelwithOneInteractions)
LinearModelwithAllInteractions = lm(glu ~ npreg + bp + skin + bmi + age + inter1 + inter2 + inter3 +
inter4 + inter5 + inter6+ inter7 + inter8 + inter9 + inter10, data = Pima.te)
summary(LinearModelwithAllInteractions)
LinearModelwithTwoInteractions = lm(glu ~ npreg + bp + skin + bmi + age + inter7 + inter9, , data = Pima.te)
summary(LinearModelwithTwoInteractions)
LinearModelwithOneInteractions = lm(glu ~ npreg + bp + skin + bmi + age + inter9, , data = Pima.te)
summary(LinearModelwithOneInteractions)
LinearModelwithAllInteractions = lm(glu ~ npreg + bp + skin + bmi + age + npreg*bp , data = Pima.te)
LinearModelwithAllInteractions = lm(glu ~ npreg + bp + skin + bmi + age + npreg*bp + npreg*skin + npreg*bmi +
npreg*age + bp*skin + bp*bmi+ bp*age + skin*bmi + skin*age + bmi*age, data = Pima.te)
summary(LinearModelwithAllInteractions)
LinearModelwithTwoInteractions = lm(glu ~ npreg + bp + skin + bmi + age + bp*age + skin*age, data = Pima.te)
summary(LinearModelwithTwoInteractions)
LinearModelwithOneInteractions = lm(glu ~ npreg + bp + skin + bmi + age + skin*age, data = Pima.te)
summary(LinearModelwithOneInteractions)
library(Matrix)
library(foreach)
library(glmnet)
x <- cbind(birthwt$age, birthwt$lwt, birthwt$race, birthwt$smoke, birthwt$ptl, birthwt$ht, birthwt$ui, birthwt$ftv)
y <- birthwt$bwt
bwt.ridge <- glmnet(x, y, alpha = 0, nlambda = 100)
bwt.ridge
plot(bwt.ridge, xvar = "lambda", label = TRUE)
# lasso
library(glmnet)
x <- birthwt[c('age', 'lwt', 'race', 'smoke', 'ptl', 'ht', 'ui', 'ftv')]
y <- birthwt$bwt
LassoModel <- glmnet(as.matrix(x), y)
cv.LassoModel <- cv.glmnet(as.matrix(x), y)
plot(cv.LassoModel)
coef <- coef(cv.LassoModel, s = 'lambda.min')
library(MASS)
data("birthwt")
library(glmnet)
x <- birthwt[c('age', 'lwt', 'race', 'smoke', 'ptl', 'ht', 'ui', 'ftv')]
y <- birthwt$bwt
LassoModel <- glmnet(as.matrix(x), y)
cv.LassoModel <- cv.glmnet(as.matrix(x), y)
plot(cv.LassoModel)
coef <- coef(cv.LassoModel, s = 'lambda.min')
coef
stepAIC(multiLinearModel, direction = 'both')
multiLinearModel <- lm(bwt ~ age + lwt + race + smoke + ptl + ht + ui + ftv, data = birthwt)
stepAIC(multiLinearModel, direction = 'both')
stepAIC(multiLinearModel, direction = 'both')
14*54
sum(1:8)
18*9 + 4.5
install.packages(adagio)
install.packages('adagio')
library(adagio)
w = c(3, 4, 5, 4, 7, 8, 5)
p = c(10, 12, 18, 19, 20, 19, 12)
cap = 18
knapsack(w, p, cap)
365*24*220.8
24*60
1440/2*270
1440*130
1440/4*550
16*60
16*60/2
480-160
320*270
24*60 - 160 * 2
1120*130
16*60 - 160*2
640 * 130
86400 - 83200
8.5 + 8.5 + 27
44*3.4
5 + 7 + 21
33 * 3.2
8.5 + 7.5 + 7.5 * 3
38.5 * 3.8
100000*0.2
20000850
20000*50
20000*50 - 90000
2.25/4
2/3.5
2/3.5 - 0.5
8, 3, 1
2, 2, 7
5, 1, 2
12 + 11 + 8
8/0.05*1
8 /0.05 + 7 / 0.05 + 2 / 0.1
3 /  0.05 + 2 /0.1 + 1/0.1
1/0.2 + 2 /0.2 + 5/0.1
160 * 1 + 90 * 1 + 2 * 65
2 * 65
130 * 0.02
1.2
2.5
?read.table
diet.data <- diet.data[!is.na(diet.data)]
diet.data <- read.table('diet.dat', header = TRUE)
diet.data <- diet.data[!is.na(diet.data)]
setwd("~/Project/ADA_Homework/Assignment 5")
diet.data <- read.table('diet.dat', header = TRUE)
diet.data <- diet.data[!is.na(diet.data)]
diet.data <- read.table('diet.dat', header = TRUE)
diet.data <- diet.data[!is.na(diet.data),]
diet.data <- read.table('diet.dat', header = TRUE)
View(diet.data)
diet.data <- diet.data[!is.na(diet.data$covar),]
diet.data <- read.table('diet.dat', header = TRUE)
diet.data <- diet.data[!is.na(diet.data$covar),]
is.na(diet.data$covar)
View(diet.data)
diet.data <- read.table('diet.dat', header = TRUE)
diet.data <- diet.data[-c(18, 43),]
View(diet.data)
anov1 <- aov(dmi ~ cow, data = diet.data)
summary(anov1)
View(diet.data)
anov2 <- aov(dmi ~ cow + covar, data = diet.data)
summary(anov2)
View(diet.data)
View(diet.data)
anov1 <- aov(dmi ~ trt + cow, data = diet.data)
summary(anov1)
# adjusting for week 3 weight
anov1 <- aov(dmi ~ trt, data = diet.data)
summary(anov1)
anov2 <- aov(dmi ~ trt + covar, data = diet.data)
summary(anov2)
anov2 <- aov(dmi ~ trt + covar, data = diet.data)
summary(anov2)
a <- summary(anov2)
a
diet.data <- read.table('diet.dat', header = TRUE)
diet.data <- diet.data[-c(18, 43),]
# without adjusting for week 3 weight
anov1 <- aov(dmi ~ trt, data = diet.data)
summary(anov1)
# adjusting for week 3 weight
anov2 <- aov(dmi ~ trt + covar, data = diet.data)
summary(anov2)
diet.data$covar <- as.numeric(diet.data$covar)
anov2 <- aov(dmi ~ trt + covar, data = diet.data)
summary(anov2)
anov3 <- aov(dmi ~ trt*covar, data = diet.data)
summary(anov3)
install.packages('lsmeans')
diet.lm <- lm(dmi ~ covar + trt, data = diet.data)
summary(diet.lm)
lsmeans(diet.lm, 'covar')
library(lsmeans)
lsmeans(diet.lm, 'covar')
qqnorm(diet.lm$residuals)
diet.data <- read.table('diet.dat', header = TRUE)
diet.data <- diet.data[-c(18, 43),]
# without adjusting for week 3 weight
anov1 <- aov(dmi ~ trt, data = diet.data)
summary(anov1)
# adjusting for week 3 weight
diet.data$covar <- as.numeric(diet.data$covar)
anov2 <- aov(dmi ~ trt + covar, data = diet.data)
summary(anov2)
library(lsmeans)
diet.lm <- lm(dmi ~ covar + trt, data = diet.data)
summary(diet.lm)
lsmeans(diet.lm, 'covar')
diet.data$covar <- as.numeric(diet.data$covar)
anov2 <- aov(dmi ~ covar + trt, data = diet.data)
summary(anov2)
library(lsmeans)
diet.lm <- lm(dmi ~ covar + trt, data = diet.data)
summary(diet.lm)
lsmeans(diet.lm, 'dmi')
lsmeans(diet.lm, 'covar')
# Test for parallelism
anov3 <- aov(dmi ~ trt*covar, data = diet.data)
summary(anov3)
anov3 <- aov(dmi ~ covar*trt, data = diet.data)
summary(anov3)
bartlett.test(diet.data$dmi, diet.data$trt)
# 2
diet.data$dmi_avg = diet.data$dmi/diet.data$weeks
diet.data$covar_avg = diet.data$covar/diet.data$weeks
anova4 = aov(dmi_avg~trt, data = diet.data)
summary(anova4)
anova5 = aov(dmi_avg~covar_avg + trt, data = diet.data$)
summary(anova5)
# 2
diet.data$dmi_avg = diet.data$dmi/diet.data$weeks
diet.data$covar_avg = diet.data$covar/diet.data$weeks
anova4 = aov(dmi_avg~trt, data = diet.data)
summary(anova4)
anova5 = aov(dmi_avg~covar_avg + trt, data = diet.data)
summary(anova5)
