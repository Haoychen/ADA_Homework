# This is assignment 1
data("ChickWeight")
# a) EDA for variable weight
weight <- ChickWeight$weight
# Bootstrap
library(bootstrap)
bias.bootstrap <- function(data, func){
estimator.sample <- func(data)
estimator.bootstrap <- bootstrap(data, nboot = 100, theta = func)$thetastar
return(mean(estimator.bootstrap - estimator.sample))
}
bias.bootstrap(weight, sd)
bias.bootstrap(weight, median)
data("chickwts")
# 1 test significant diff
soybean <- chickwts[chickwts$feed == 'soybean',][['weight']]
casein <- chickwts[chickwts$feed == 'casein',][['weight']]
# parametric procedure
t.test(soybean, casein, var.equal = TRUE)
# Non-parametric procedure
wilcox.test(soybean, casein)
# re-sampling procedure
bootstrap.test <- function(x, y, B){
x.mean <- mean(x)
y.mean <- mean(y)
x.var <- var(x)
y.var <- var(y)
n <- length(x)
m <- length(y)
z.obs <- (x.mean - y.mean) / sqrt(x.var / n + y.var / m)
y <- y + x.mean - y.mean
z <- c()
for(i in 1:B){
x.star <- sample(x, n, replace = TRUE)
y.star <- sample(y, m, replace = TRUE)
x.star.mean <- mean(x.star)
y.star.mean <- mean(y.star)
x.star.var <- var(x.star)
y.star.var <- var(y.star)
z[i] <- abs((x.star.mean - y.star.mean) / sqrt(x.star.var / n + y.star.var / m))
}
print(z.obs)
print(z)
return(sum(z > z.obs) / B)
}
# 2 confidenct interval
bootstrap.test <- function(x, y, B){
x.mean <- mean(x)
y.mean <- mean(y)
x.var <- var(x)
y.var <- var(y)
n <- length(x)
m <- length(y)
z.obs <- abs((x.mean - y.mean) / sqrt(x.var / n + y.var / m))
y <- y + x.mean - y.mean
z <- c()
for(i in 1:B){
x.star <- sample(x, n, replace = TRUE)
y.star <- sample(y, m, replace = TRUE)
x.star.mean <- mean(x.star)
y.star.mean <- mean(y.star)
x.star.var <- var(x.star)
y.star.var <- var(y.star)
z[i] <- abs((x.star.mean - y.star.mean) / sqrt(x.star.var / n + y.star.var / m))
}
print(z.obs)
print(z)
return(sum(z > z.obs) / B)
}
bootstrap.test(soybean, casein, 1000)
data("chickwts")
# 1 test significant diff
soybean <- chickwts[chickwts$feed == 'soybean',][['weight']]
casein <- chickwts[chickwts$feed == 'casein',][['weight']]
# parametric procedure
t.test(soybean, casein, var.equal = TRUE)
# Non-parametric procedure
wilcox.test(soybean, casein)
# re-sampling procedure
bootstrap.test <- function(x, y, B){
x.mean <- mean(x)
y.mean <- mean(y)
x.var <- var(x)
y.var <- var(y)
n <- length(x)
m <- length(y)
z.obs <- abs((x.mean - y.mean) / sqrt(x.var / n + y.var / m))
y <- y + x.mean - y.mean
z <- c()
for(i in 1:B){
x.star <- sample(x, n, replace = TRUE)
y.star <- sample(y, m, replace = TRUE)
x.star.mean <- mean(x.star)
y.star.mean <- mean(y.star)
x.star.var <- var(x.star)
y.star.var <- var(y.star)
z[i] <- abs((x.star.mean - y.star.mean) / sqrt(x.star.var / n + y.star.var / m))
}
return(sum(z > z.obs) / B)
}
# 2 confidenct interval
data("chickwts")
# 1 test significant diff
soybean <- chickwts[chickwts$feed == 'soybean',][['weight']]
casein <- chickwts[chickwts$feed == 'casein',][['weight']]
sunflower <- chickwts[chickwts$feed == 'sunflower',][['weight']]
median.ConfidenceInterval <- function(x, B){
median <- c()
for(i in 1: B){
x.sample <- sample(x, length(x), replace = T)
median[i] <- median(x.sample)
}
print(quantile(median, c(.05, .95)))
}
median.ConfidenceInterval(sunflower, 10000)
# This is assignment 1
data("chickwts")
# 1 test significant diff
soybean <- chickwts[chickwts$feed == 'soybean',][['weight']]
casein <- chickwts[chickwts$feed == 'casein',][['weight']]
# parametric procedure
t.test(soybean, casein, var.equal = TRUE)
# Non-parametric procedure
wilcox.test(soybean, casein)
# re-sampling procedure
bootstrap.test <- function(x, y, B){
x.mean <- mean(x)
y.mean <- mean(y)
x.var <- var(x)
y.var <- var(y)
n <- length(x)
m <- length(y)
z.obs <- abs((x.mean - y.mean) / sqrt(x.var / n + y.var / m))
y <- y + x.mean - y.mean
z <- c()
for(i in 1:B){
x.star <- sample(x, n, replace = TRUE)
y.star <- sample(y, m, replace = TRUE)
x.star.mean <- mean(x.star)
y.star.mean <- mean(y.star)
x.star.var <- var(x.star)
y.star.var <- var(y.star)
z[i] <- abs((x.star.mean - y.star.mean) / sqrt(x.star.var / n + y.star.var / m))
}
return(sum(z > z.obs) / B)
}
bootstrap.test(soybean, casein, 10000)
# 2 confidenct interval
sunflower <- chickwts[chickwts$feed == 'sunflower',][['weight']]
# a. 95% confidence interval for median
median.ConfidenceInterval <- function(x, B){
median <- c()
for(i in 1: B){
x.sample <- sample(x, length(x), replace = T)
median[i] <- median(x.sample)
}
print(quantile(median, c(.05, .95)))
}
median.ConfidenceInterval(casein, 10000)
median.ConfidenceInterval(sunflower, 10000)
median.ConfidenceInterval(casein, 100000)
median.ConfidenceInterval(sunflower, 100000)
# b. 95% CI for ratio of the variance
ratio.ConfidenceInterval <- function(x, y, B){
ratio <- c()
for(i in 1: B){
x.sample <- sample(x, length(x), replace = T)
y.sample <- sample(y, length(y), replace = T)
ratio[i] <- var(x.sample) / var(y.sample)
}
print(quantile(ratio, c(.025, .975)))
}
ratio.ConfidenceInterval(casein, sunflower, 10000)
a <- t.test(casein)
a$conf.int
# b. 95% CI for ratio of the variance
normal_ratio.ConfidenceInterval <- function(x, y, B){
ratio <- c()
for(i in 1: B){
x.sample <- sample(x, length(x), replace = T)
y.sample <- sample(y, length(y), replace = T)
ratio[i] <- var(x.sample) / var(y.sample)
}
print(t.test(ratio)$conf.int)
}
# b. 95% CI for ratio of the variance
NormalRatio.ConfidenceInterval <- function(x, y, B){
ratio <- c()
for(i in 1: B){
x.sample <- sample(x, length(x), replace = T)
y.sample <- sample(y, length(y), replace = T)
ratio[i] <- var(x.sample) / var(y.sample)
}
print(t.test(ratio)$conf.int)
}
NormalRatio.ConfidenceInterval(casein, sunflower, 10000)
meatmeal <- chickwts[chickwts$feed == 'meanmeal',][['weight']]
chickwts$feed
meatmeal <- chickwts[chickwts$feed == 'meatmeal',][['weight']]
meatmeal.LowWeight <- sum(meatmeal < 256)
soybean.LowWeight <- sum(soybean < 256)
prop.test(x, n)
meatmeal <- chickwts[chickwts$feed == 'meatmeal',][['weight']]
meatmeal.LowWeight <- sum(meatmeal < 256)
soybean.LowWeight <- sum(soybean < 256)
x <- c(meatmeal.LowWeight, soybean.LowWeight)
n <- c(length(meatmeal), length(soybean))
prop.test(x, n)
n
median.ConfidenceInterval <- function(x, y, B){
median.diff <- c()
for(i in 1: B){
x.sample <- sample(x, length(x), replace = T)
y.sample <- sample(y, length(y), replace = T)
median[i] <- median(x.sample) - median(y.sample)
}
print(quantile(median, c(.025, .975)))
}
# This is assignment 1
data("chickwts")
# 1 test significant diff
soybean <- chickwts[chickwts$feed == 'soybean',][['weight']]
casein <- chickwts[chickwts$feed == 'casein',][['weight']]
# parametric procedure
t.test(soybean, casein, var.equal = TRUE)
# Non-parametric procedure
wilcox.test(soybean, casein)
# re-sampling procedure
bootstrap.test <- function(x, y, B){
x.mean <- mean(x)
y.mean <- mean(y)
x.var <- var(x)
y.var <- var(y)
n <- length(x)
m <- length(y)
z.obs <- abs((x.mean - y.mean) / sqrt(x.var / n + y.var / m))
y <- y + x.mean - y.mean
z <- c()
for(i in 1:B){
x.star <- sample(x, n, replace = TRUE)
y.star <- sample(y, m, replace = TRUE)
x.star.mean <- mean(x.star)
y.star.mean <- mean(y.star)
x.star.var <- var(x.star)
y.star.var <- var(y.star)
z[i] <- abs((x.star.mean - y.star.mean) / sqrt(x.star.var / n + y.star.var / m))
}
return(sum(z > z.obs) / B)
}
bootstrap.test(soybean, casein, 10000)
# 2 confidenct interval
sunflower <- chickwts[chickwts$feed == 'sunflower',][['weight']]
MedianDiff.ConfidenceInterval <- function(x, y, B){
median.diff <- c()
for(i in 1: B){
x.sample <- sample(x, length(x), replace = T)
y.sample <- sample(y, length(y), replace = T)
median[i] <- median(x.sample) - median(y.sample)
}
print(quantile(median.diff, c(.025, .975)))
}
median.ConfidenceInterval(casein, sunflower, 100000)
MedianDiff.ConfidenceInterval <- function(x, y, B){
median.diff <- c()
for(i in 1: B){
x.sample <- sample(x, length(x), replace = T)
y.sample <- sample(y, length(y), replace = T)
median.diff[i] <- median(x.sample) - median(y.sample)
}
print(quantile(median.diff, c(.025, .975)))
}
median.ConfidenceInterval(casein, sunflower, 100000)
MedianDiff.ConfidenceInterval <- function(x, y, B){
median.diff <- c()
for(i in 1: B){
x.sample <- sample(x, length(x), replace = T)
y.sample <- sample(y, length(y), replace = T)
median.diff[i] <- median(x.sample) - median(y.sample)
}
print(quantile(median.diff, c(.025, .975)))
}
median.ConfidenceInterval(casein, sunflower, 100000)
MedianDiff.ConfidenceInterval(casein, sunflower, 100000)
# This is assignment 1
data("chickwts")
# 1 test significant diff
soybean <- chickwts[chickwts$feed == 'soybean',][['weight']]
casein <- chickwts[chickwts$feed == 'casein',][['weight']]
# parametric procedure
t.test(soybean, casein, var.equal = TRUE)
# Non-parametric procedure
wilcox.test(soybean, casein)
# re-sampling procedure
bootstrap.test <- function(x, y, B){
x.mean <- mean(x)
y.mean <- mean(y)
x.var <- var(x)
y.var <- var(y)
n <- length(x)
m <- length(y)
z.obs <- abs((x.mean - y.mean) / sqrt(x.var / n + y.var / m))
y <- y + x.mean - y.mean
z <- c()
for(i in 1:B){
x.star <- sample(x, n, replace = TRUE)
y.star <- sample(y, m, replace = TRUE)
x.star.mean <- mean(x.star)
y.star.mean <- mean(y.star)
x.star.var <- var(x.star)
y.star.var <- var(y.star)
z[i] <- abs((x.star.mean - y.star.mean) / sqrt(x.star.var / n + y.star.var / m))
}
return(sum(z > z.obs) / B)
}
bootstrap.test(soybean, casein, 10000)
# 2 confidenct interval
sunflower <- chickwts[chickwts$feed == 'sunflower',][['weight']]
# a. 95% confidence interval for median
MedianDiff.ConfidenceInterval <- function(x, y, B){
median.diff <- c()
for(i in 1: B){
x.sample <- sample(x, length(x), replace = T)
y.sample <- sample(y, length(y), replace = T)
median.diff[i] <- median(x.sample) - median(y.sample)
}
print(quantile(median.diff, c(.025, .975)))
}
MedianDiff.ConfidenceInterval(casein, sunflower, 100000)
# b. 95% CI for ratio of the variance
ratio.ConfidenceInterval <- function(x, y, B){
ratio <- c()
for(i in 1: B){
x.sample <- sample(x, length(x), replace = T)
y.sample <- sample(y, length(y), replace = T)
ratio[i] <- var(x.sample) / var(y.sample)
}
print(quantile(ratio, c(.025, .975)))
}
ratio.ConfidenceInterval(casein, sunflower, 10000)
# c. 95% CI for ratio of the variance under normal assumption
NormalRatio.ConfidenceInterval <- function(x, y, B){
ratio <- c()
for(i in 1: B){
x.sample <- sample(x, length(x), replace = T)
y.sample <- sample(y, length(y), replace = T)
ratio[i] <- var(x.sample) / var(y.sample)
}
print(t.test(ratio)$conf.int)
}
NormalRatio.ConfidenceInterval(casein, sunflower, 10000)
# 3 significant diff
meatmeal <- chickwts[chickwts$feed == 'meatmeal',][['weight']]
meatmeal.LowWeight <- sum(meatmeal < 256)
soybean.LowWeight <- sum(soybean < 256)
x <- c(meatmeal.LowWeight, soybean.LowWeight)
n <- c(length(meatmeal), length(soybean))
prop.test(x, n)
# This is assignment 1
data("chickwts")
# 1 test significant diff
soybean <- chickwts[chickwts$feed == 'soybean',][['weight']]
casein <- chickwts[chickwts$feed == 'casein',][['weight']]
# parametric procedure
t.test(soybean, casein, var.equal = TRUE)
# Non-parametric procedure
wilcox.test(soybean, casein)
# re-sampling procedure
bootstrap.test <- function(x, y, B){
x.mean <- mean(x)
y.mean <- mean(y)
x.var <- var(x)
y.var <- var(y)
n <- length(x)
m <- length(y)
z.obs <- abs((x.mean - y.mean) / sqrt(x.var / n + y.var / m))
y <- y + x.mean - y.mean
z <- c()
for(i in 1:B){
x.star <- sample(x, n, replace = TRUE)
y.star <- sample(y, m, replace = TRUE)
x.star.mean <- mean(x.star)
y.star.mean <- mean(y.star)
x.star.var <- var(x.star)
y.star.var <- var(y.star)
z[i] <- abs((x.star.mean - y.star.mean) / sqrt(x.star.var / n + y.star.var / m))
}
return(sum(z > z.obs) / B)
}
bootstrap.test(soybean, casein, 10000)
# 2 confidenct interval
sunflower <- chickwts[chickwts$feed == 'sunflower',][['weight']]
# a. 95% confidence interval for median
MedianDiff.ConfidenceInterval <- function(x, y, B){
median.diff <- c()
for(i in 1: B){
x.sample <- sample(x, length(x), replace = T)
y.sample <- sample(y, length(y), replace = T)
median.diff[i] <- median(x.sample) - median(y.sample)
}
print(quantile(median.diff, c(.025, .975)))
}
MedianDiff.ConfidenceInterval(casein, sunflower, 100000)
# b. 95% CI for ratio of the variance
ratio.ConfidenceInterval <- function(x, y, B){
ratio <- c()
for(i in 1: B){
x.sample <- sample(x, length(x), replace = T)
y.sample <- sample(y, length(y), replace = T)
ratio[i] <- var(x.sample) / var(y.sample)
}
print(quantile(ratio, c(.025, .975)))
}
ratio.ConfidenceInterval(casein, sunflower, 10000)
# c. 95% CI for ratio of the variance under normal assumption
NormalRatio.ConfidenceInterval <- function(x, y, B){
ratio <- c()
for(i in 1: B){
x.sample <- sample(x, length(x), replace = T)
y.sample <- sample(y, length(y), replace = T)
ratio[i] <- var(x.sample) / var(y.sample)
}
print(t.test(ratio)$conf.int)
}
NormalRatio.ConfidenceInterval(casein, sunflower, 10000)
# 3 significant diff
meatmeal <- chickwts[chickwts$feed == 'meatmeal',][['weight']]
meatmeal.LowWeight <- sum(meatmeal < 256)
soybean.LowWeight <- sum(soybean < 256)
x <- c(meatmeal.LowWeight, soybean.LowWeight)
n <- c(length(meatmeal), length(soybean))
prop.test(x, n)
setwd("~/Project/ADA_Homework/Assignment 3")
library('MASS')
data("Pima.te")
View(Pima.te)
LinearModel <- lm(glu ~ npreg + bp + skin + bmi + age, data = Pima.te)
summary(LinearModel)
Pima.te <- Pima.te['glu', 'npreg', 'bp', 'skin', 'bmi', 'age']
View(Pima.te)
Pima.te <- Pima.te[c('glu', 'npreg', 'bp', 'skin', 'bmi', 'age')]
View(Pima.te)
LinearModel <- lm(glu ~ npreg + bp + skin + bmi + age, data = Pima.te)
summary(LinearModel)
library(ggplot2)
library("ggplot2")
install.packages('"ggplot2')
install.packages('"ggplot2')
devtools::install_github("hadley/ggplot2")
??dvtools
install.packages('devtools')
library(devtools)
devtools::install_github("hadley/ggplot2")
library(ggplot2)
plotmatrix(Pima.te) + geom_smooth(method = 'lm')
plot(Pima.te) + geom_smooth(method = 'lm')
pairs(ggplot2)
pairs(Pima.te)
version(ggplot2)
version
geom_point(Pima.te) + geom_smooth(method = 'lm')
library(GGally)
install.packages('GGally')
library(GGally)
ggpairs(Pima.te)
LinearModel$residuals
qqplot(LinearModel$residuals)
hist(LinearModel$residuals)
qqnorm(LinearModel$residuals)
hist(LinearModel$residuals, main = 'Histogram of residuals')
qqnorm(LinearModel$residuals)
qqnorm(LinearModel$residuals)
plot(LinearModel$residuals, Pima.te$npreg)
plot(LinearModel$residuals, Pima.te$bp)
plot(LinearModel$residuals, Pima.te$skin)
plot(LinearModel$residuals, Pima.te$bmi)
plot(LinearModel$residuals, Pima.te$age)
plot(LinearModel$residuals, Pima.te$npreg, xlab = 'residuals', ylab = 'npreg')
plot(LinearModel$residuals, Pima.te$bp, xlab = 'residuals', ylab = 'bp')
plot(LinearModel$residuals, Pima.te$skin, xlab = 'residuals', ylab = 'skin')
plot(LinearModel$residuals, Pima.te$bmi, xlab = 'residuals', ylab = 'bmi')
plot(LinearModel$residuals, Pima.te$age, xlab = 'residuals', ylab = 'age')
plot(LinearModel)
plot(LinearModel)
